/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication163;

import java.awt.*; // Untuk elemen GUI dan layout
import java.awt.event.*; // Untuk event handling seperti ActionListener
import java.sql.*; // Untuk koneksi database dan SQL statement
import java.util.Vector;
import javax.swing.*; // Untuk komponen Swing seperti JFrame, JButton, JTable, dll.
import javax.swing.table.*; // Untuk model tabel seperti DefaultTableModel
import oracle.jdbc.OracleTypes;

public class sales extends javax.swing.JFrame {

    /**
     * Creates new form sales
     */
    public sales() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Perpustakaan");
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loadData();
    }
    
private void loadData() {
    // Menyiapkan koneksi ke database
    String sql = "SELECT ID_SALES, ID_CUSTOMER, FACTURE, SALES_DATE, TOTALQTY, " +
                 "PAYMENT_BEFORE_DISC, DISCOUNT, PAYMENT_AFTER_DISC, ID_METODE_PEMBAYARAN FROM SALES";

    try (Connection conn = DatabaseConnection.getConnection();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {

        // Mendapatkan metadata untuk menentukan kolom
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        // Menyiapkan kolom tabel berdasarkan metadata
        String[] columnNames = new String[columnCount];
        for (int i = 1; i <= columnCount; i++) {
            columnNames[i - 1] = metaData.getColumnName(i);  // Ambil nama kolom
        }

        // Buat DefaultTableModel dengan kolom yang sudah diambil
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columnNames);  // Menambahkan nama kolom ke model

        // Menambahkan data dari ResultSet ke dalam tabel
        while (rs.next()) {
            Object[] rowData = new Object[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                rowData[i - 1] = rs.getObject(i);  // Ambil data untuk setiap kolom
            }
            model.addRow(rowData);  // Menambahkan baris data ke model
        }

        // Set model pada JTable
        sales.setModel(model);  // sales adalah instance JTable Anda

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading data from database.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sales = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        total = new javax.swing.JTable();
        qty = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        total1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        min = new javax.swing.JTable();
        qty1 = new javax.swing.JButton();
        besar = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        max = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Sales");

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        sales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "id_sales", "id_customer", "facture", "sales_date", "totalqty", "payment_before_discount", "discount", "payment_after_discount", "id_metode_pembayaran"
            }
        ));
        jScrollPane1.setViewportView(sales);
        if (sales.getColumnModel().getColumnCount() > 0) {
            sales.getColumnModel().getColumn(0).setHeaderValue("id_sales");
            sales.getColumnModel().getColumn(1).setHeaderValue("id_customer");
            sales.getColumnModel().getColumn(2).setHeaderValue("facture");
            sales.getColumnModel().getColumn(3).setHeaderValue("sales_date");
            sales.getColumnModel().getColumn(4).setHeaderValue("totalqty");
            sales.getColumnModel().getColumn(5).setHeaderValue("payment_before_discount");
            sales.getColumnModel().getColumn(6).setHeaderValue("discount");
            sales.getColumnModel().getColumn(7).setHeaderValue("payment_after_discount");
            sales.getColumnModel().getColumn(8).setHeaderValue("id_metode_pembayaran");
        }

        jButton2.setText("Jumlah Keseluruhan Discount");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        total.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Hasil"
            }
        ));
        jScrollPane2.setViewportView(total);

        qty.setText("Jumlah Keseluruhan Quantity");
        qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyActionPerformed(evt);
            }
        });

        total1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Hasil"
            }
        ));
        jScrollPane3.setViewportView(total1);

        min.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Hasil"
            }
        ));
        jScrollPane4.setViewportView(min);

        qty1.setText("Discount Terkecil");
        qty1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qty1ActionPerformed(evt);
            }
        });

        besar.setText("Discount Terbesar");
        besar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                besarActionPerformed(evt);
            }
        });

        max.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Hasil"
            }
        ));
        jScrollPane5.setViewportView(max);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(35, 35, 35))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(355, 355, 355)
                        .addComponent(jLabel1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 727, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(qty1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(besar, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(qty))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qty1)
                    .addComponent(besar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tablekoneksi bukuFrame = new tablekoneksi();
        bukuFrame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                                        
    // Menyiapkan koneksi dan CallableStatement
    Connection conn = null;
    CallableStatement stmt = null;

    try {
        // Mengambil koneksi ke database (gunakan koneksi yang sudah ada)
        conn = DatabaseConnection.getConnection();  // Koneksi sudah ada sesuai dengan instruksi Anda

        // Memanggil fungsi get_total_discount yang ada di Oracle
        String sql = "{ ? = call get_total_discount() }";  // Fungsi Oracle yang mengembalikan total diskon
        stmt = conn.prepareCall(sql);

        // Mendaftarkan parameter output untuk hasil fungsi
        stmt.registerOutParameter(1, Types.INTEGER);  // Menggunakan Types.INTEGER untuk total diskon dalam angka integer

        // Menjalankan statement untuk memanggil fungsi
        stmt.execute();

        // Mengambil hasil dari fungsi
        int totalDiscount = stmt.getInt(1);  // Mengambil hasil total diskon sebagai angka integer

        // Menambahkan hasil ke dalam tabel 'total' di Java
        DefaultTableModel model = (DefaultTableModel) total.getModel();  // 'total' adalah variabel tabel Anda

        // Membuat array untuk menyimpan data baris pertama yang hanya berisi angka total diskon
        Object[] rowData = new Object[1];  // Hanya ada satu kolom
        rowData[0] = totalDiscount;   // Total diskon sebagai angka integer

        // Menambahkan baris baru di posisi pertama
        model.insertRow(0, rowData);  // Menambahkan data pada baris pertama

        // Menampilkan hasil ke UI (misalnya ke label atau dialog)
        JOptionPane.showMessageDialog(this, "Total Keselurahan Diskon: " + totalDiscount);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while calling the function.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            // Menutup koneksi dan statement
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



    }//GEN-LAST:event_jButton2ActionPerformed

    private void qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyActionPerformed
                                     
    // Menyiapkan koneksi dan CallableStatement
    Connection conn = null;
    CallableStatement stmt = null;

    try {
        // Mengambil koneksi ke database (gunakan koneksi yang sudah ada)
        conn = DatabaseConnection.getConnection();  // Koneksi sudah ada sesuai dengan instruksi Anda

        // Memanggil fungsi get_total_quantity yang ada di Oracle
        String sql = "{ ? = call get_total_quantity() }";  // Fungsi Oracle yang mengembalikan total quantity
        stmt = conn.prepareCall(sql);

        // Mendaftarkan parameter output untuk hasil fungsi
        stmt.registerOutParameter(1, Types.INTEGER);  // Menggunakan Types.INTEGER untuk total quantity dalam angka integer

        // Menjalankan statement untuk memanggil fungsi
        stmt.execute();

        // Mengambil hasil dari fungsi
        int totalQuantity = stmt.getInt(1);  // Mengambil hasil total quantity sebagai angka integer

        // Menampilkan hasil di label atau tabel
        JOptionPane.showMessageDialog(this, "Total Quantity: " + totalQuantity);

        // Jika ingin memasukkan hasil ke dalam tabel (misalnya tabel 'total')
        DefaultTableModel model = (DefaultTableModel) total1.getModel();  // 'total' adalah variabel tabel Anda

        // Menyiapkan data untuk ditampilkan di tabel
        Object[] rowData = new Object[1];  // Hanya ada satu kolom untuk menampilkan total quantity
        rowData[0] = totalQuantity;   // Total quantity yang dihitung oleh fungsi

        // Menambahkan data ke dalam baris pertama tabel
        model.insertRow(0, rowData);  // Menambahkan data pada baris pertama

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while calling the function.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            // Menutup koneksi dan statement
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
   // TODO add your handling code here:
    }//GEN-LAST:event_qtyActionPerformed

    private void qty1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qty1ActionPerformed
                                         
                                   
    // Mendeklarasikan koneksi dan callable statement
    try (Connection conn = DatabaseConnection.getConnection()) {
        // Menyiapkan callable statement untuk memanggil fungsi get_min_discount
        String sql = "{ ? = call get_min_discount }";  // Panggil fungsi tanpa tanda kurung setelah nama fungsi
        CallableStatement stmt = conn.prepareCall(sql);

        // Mendaftarkan parameter output untuk hasil fungsi
        stmt.registerOutParameter(1, Types.INTEGER);

        // Menjalankan statement untuk memanggil fungsi
        stmt.execute();

        // Mengambil nilai terkecil dari discount
        int minDiscount = stmt.getInt(1);

        // Menampilkan hasil di tabel 'qty1'
        DefaultTableModel model = (DefaultTableModel) min.getModel();  // 'qty1' adalah variabel JTable Anda
        model.setRowCount(0);  // Menghapus data yang ada sebelumnya
        Object[] rowData = new Object[1];  // Hanya ada satu kolom untuk menampilkan nilai terkecil
        rowData[0] = minDiscount;  // Menambahkan nilai terkecil
        model.addRow(rowData);  // Menambahkan data ke baris pertama

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error calling function get_min_discount", "Error", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_qty1ActionPerformed

    private void besarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_besarActionPerformed
                                        
    // Mendeklarasikan koneksi dan callable statement
    try (Connection conn = DatabaseConnection.getConnection()) {
        // Menyiapkan callable statement untuk memanggil fungsi get_max_discount
        String sql = "{ ? = call get_max_discount }";  // Panggil fungsi tanpa tanda kurung setelah nama fungsi
        CallableStatement stmt = conn.prepareCall(sql);

        // Mendaftarkan parameter output untuk hasil fungsi
        stmt.registerOutParameter(1, Types.INTEGER);

        // Menjalankan statement untuk memanggil fungsi
        stmt.execute();

        // Mengambil nilai terbesar dari discount
        int maxDiscount = stmt.getInt(1);

        // Menampilkan hasil di tabel 'qty1'
        DefaultTableModel model = (DefaultTableModel) max.getModel();  // 'qty1' adalah variabel JTable Anda
        model.setRowCount(0);  // Menghapus data yang ada sebelumnya
        Object[] rowData = new Object[1];  // Hanya ada satu kolom untuk menampilkan nilai terbesar
        rowData[0] = maxDiscount;  // Menambahkan nilai terbesar
        model.addRow(rowData);  // Menambahkan data ke baris pertama

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error calling function get_max_discount", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_besarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton besar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable max;
    private javax.swing.JTable min;
    private javax.swing.JButton qty;
    private javax.swing.JButton qty1;
    private javax.swing.JTable sales;
    private javax.swing.JTable total;
    private javax.swing.JTable total1;
    // End of variables declaration//GEN-END:variables
}
